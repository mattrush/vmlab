#!/bin/bash
# define default guest metadata

#######
# functions
#######

#
# $uuid specific
#

# set a random uuid
set_random_uuid () {
  random=$(uuidgen)
}

# identify the collision set
set_inuse_uuids () {
  for i in $(find $configurationpath/ -type f ! -name ".*" |grep .conf |xargs -I% grep uuid % |cut -d = -f 2 |sed "/^$/d"); do
    inuse+=($i)
  done
}

#
# $mac specific
#

# generate a random mac
newmac () {
  mac=$( printf 'FA:DE:%02X:%02X:%02X:%02X\n' $((RANDOM%256)) $((RANDOM%256)) $((RANDOM%256)) $((RANDOM%256)) )
  #mac=$( printf '00:00:00:00:%02X:00\n' $((RANDOM%256)) ); #DEBUG increase probability of collision
  echo $mac
}

# set a random mac 
set_random_mac () {
  random=$(newmac)
}

# identify all mac addresses currently in use on the system
set_inuse_macs () {
  inuse+=( $(ps aux |grep -v grep |grep qemu-kvm |awk '{print $19}' |cut -d = -f 3-) )
}

#
# $port specific
#

# generate a random port
newport() {
  floor=110

  rp=$RANDOM
  until (( $rp % 5 == 0 )) && [ $rp -ge $floor ]; do 
    rp=$RANDOM
  done
  echo $rp
}

# set a random port
set_random_port () {
  random=$(newport)
}

# identify all ports currently in use on the system
set_inuse_ports () {
  for i in $(ps aux |grep -v grep |grep qemu-kvm |awk '{print $32}' |cut -d : -f 3- |cut -d , -f 1); do
    i=$(( $i-2 ))
    inuse+=($i)
  done
}

#
# psuedo-anonymous functions
#

# show set
show_set () {
  echo $random test
  for i in "${inuse[@]}"; do
    echo "$i ${#inuse[@]}"
  done
  echo -e '\n'
}

# flag for mac address collision 
check_unique () {
  c=${#inuse[@]}
  until [ $c == 0 ]; do
    ((c--))
    [ "$random" == "${inuse[$c]}" ] && collisionflag=1
  done
  return 0
}

#
# general functions
#

# determine guest os and set dufault nicdriver accordingly
nic_depends_on_os () {
  if [[ ! $os =~ windows* ]]; then
    echo virtio-net
  else
    echo rtl8139
  fi
}

# set the defaults
set_defaults () {
  [ -z "$uuid" ] && uuid=$randomuuid
  [ -z "$os" ] && os='slackware64-14.1'
  [ -z "$mem" ] && mem='512M'
  [ -z "$size" ] && size='10G'
  [ -z "$nicdriver" ] && nicdriver=$(nic_depends_on_os)
  [ -z "$bootdevice" ] && bootdevice='cdrom'
  [ -z "$wait_" ] && wait_='600'
  [ -z "$mac" ] && mac="$randommac"
  [ -z "$port" ] && port="$randomport"
  [ -z "$access" ] && access='vnc'
  [ -z "$datadisks" ] && datadisks=()
  [ -z "$cryptlock" ] && cryptlock='1'
  [ -z "$kernel" ] && kernel='none'
  [ -z "$append" ] && append='none'
  [ -z "$initrd" ] && initrd='none'
}

# print the defaults
print_defaults () {
  echo uuid "$uuid"
  echo os "$os"
  echo mem "$mem"
  echo size "$size"
  echo nicdriver "$nicdriver"
  echo bootdevice "$bootdevice"
  echo wait "$wait_"
  echo mac "$mac"
  echo port "$port"
  echo access "$access"
  echo datadisks "${datadisks[*]}"
  echo cryptlock "$cryptlock"
  echo kernel "$kernel"
  echo append "$append"
  echo initrd "$initrd"
}

log_event () {
  # log the previous event
  rs=$?
  
  # workaround for unremove and destroy actions
  [[ "$action" =~ /(destoyed|unremove)/g ]] && uuid=$saveuuid

  # log the event
  [ "$rs" == 0 ] && echo "$(date $dateformat): $action: $guest-$uuid $rs" 1>> $log
  [ "$rs" != 0 ] && echo "$(date $dateformat): $action: $guest-$uuid $rs" 1>> $error
}

#######
# generate runtime default guest metadata
#######

test_and_set_defaults () {
  # find a unique uuid
  set_inuse_uuids
  while :; do
    set_random_uuid
    [ -n "$verboseflag" ] && show_set
    check_unique
    [ -z "$collisionflag" ] && randomuuid="$random" && break
    #unset random
  done
  unset inuse

  # find a unique mac address
  set_inuse_macs
  while :; do
    set_random_mac
    [ -n "$verboseflag" ] && show_set
    check_unique
    [ -z "$collisionflag" ] && randommac="$random" && break
    #unset random
  done
  unset inuse
  
  # find a unique port within range
  set_inuse_ports
  while :; do
    set_random_port
    [ -n "$verboseflag" ] && show_set
    check_unique
    [ -z "$collisionflag" ] && randomport="$random" && break
  done
  #unset inuse
  
# set defaults at last
set_defaults
#print_defaults
}
